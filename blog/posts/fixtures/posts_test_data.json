[
    {
        "pk": 1, 
        "model": "posts.post", 
        "fields": {
            "body": "## Building a Blog Part 1\n\nLet's begin with a confession: I know nothing about web development. I studied Physics\nat university, and all of my programming skills have been drawn from writing native\napplications, either in internships or my spare time. As I write this first paragraph,\nI know the barest minimum about HTML, CSS or Javascript. Don't get me wrong, I'm down\nwith the cool kids: I read [Hacker News](https://news.ycombinator.com/), I'm a lover\nof [GitHub](https://github.com/Lukasa), and I know that people get very excited about\nthe new hotness in the form of [HTML5](http://www.html5rocks.com/en/) and\n[CSS3](http://www.css3.info/).\n\nWhat I've never done is write anything using any web-based technology. A quick look at\nmy [GitHub Profile](https://github.com/Lukasa) will indicate that my go-to language is\nPython, but I've only barely glanced at any of the Python web frameworks. The closest\nI've come to doing web development is writing web scrapers using the truly excellent\nPython [Requests](https://github.com/kennethreitz/requests) library. (It really is\nexcellent, check it out if you haven't already. *That* is how you design an API.)\n\nHowever, as time passes it seems increasingly likely that my lack of web development\nskills will potentially prove a professional liability. For that reason, I've decided\nto devote my summer to familiarising myself with some of the skills required for modern\nweb development.\n\n### Why A Blog?\n\nBecause I don't have one already. I like to write, so it'll be nice to have a platform;\nand besides, it's an increasingly vital part of a technical CV. Additionally, a simple\nblog is likely to be not-too-complicated to implement (famous last words). It's decided\nthen: let's build a blog!\n\n### Alright then, what's the plan?\n\nSimple. Over the summer, using nothing but a standard web framework, create and launch\na simple blog. In an ideal world, I'd like to be able to open-source the blog framework,\nbut this isn't a dealbreaker for me. As I build it, I'll write blog posts that document\nmy decisions and my work, and once the blog is running it will host them.\n\nThe blog is not intended to be easy-access, or highly complicated. I won't be building\na blog that is intended for use by people who aren't comfortable with working in a\ncommand shell, at least not initially.\n\nIn the next blog post, we'll begin to lay out the tools we'll use and the requirements\nwe'll have for our blog. These will inform the design decisions we make down the road.\nI hope you'll find these posts to be helpful.\n\n", 
            "publication_date": "2012-05-11T18:11:07.522Z", 
            "enable_comments": true, 
            "title": "1_Building_A_Blog_Part_1"
        }
    }, 
    {
        "pk": 2, 
        "model": "posts.post", 
        "fields": {
            "body": "## Building a Blog Part 2\n\nAs we talked about in Part 1, this summer I'm going to write a simple,\nstripped-down blog framework. This is a perfectly solid goal, but before I\nstart I need to decide what tools I'm going to use, and what features the blog\nshould have.\n\n### Features\n\nThe basic feature of a blog is, of course, the ability to make blog posts. In\nmore fully-featured blog systems like WordPress, these blog posts can be\nwritten and managed using a web interface. In the long-term I might write such\nan interface, but for now I'd rather compose blog posts using my preferred\ncommand-line editor, Vim. For this reason, then, I will not make blog posts\neditable using any kind of web form.\n\nAnother commonly-used feature of blogs is comments, which means my blog system\nshould allow comments too. This will be a feature I'll add after adding the\nposts feature, and in an ideal world it will be modular, so that you can add\nyour own comment logic instead of mine. This is an ideal that I will be\nprepared to sacrifice on the altar of practicality if I have to.\n\nFinally, I don't want to mess around with hosting. Excluding the fact that my\nblog is likely to be so low-traffic that a VPS from someone like\n[Linode](http://www.linode.com/) would be overkill, I'm not yet ready for all\nof the messing around with\n[Fabric](http://docs.fabfile.org/en/1.4.1/index.html) and \n[Apache](http://httpd.apache.org/)/[nginx](http://nginx.org/)/whatever you\nlike. With this in mind, I'm going to take a look at the, to my mind at least,\nultra-cool [Heroku](http://www.heroku.com/).\n\n### Tools\n\nOur first limitation is set in place by the use of Heroku. Heroku requires that\nI use one of several programming languages: Java, Ruby, Python, Clojure, Scala\nor Javascript. My experience is largely Python-based, which makes Python an\nattactive option.\n\n'But wait!' I hear you cry. 'You said in Part 1 that you wanted to learn some\nof the tools of the web development trade, and there is no denying that Ruby\nand Ruby on Rails are the cool thing.' You are, of course, absolutely right.\nHowever, there are multiple blog frameworks on Rails already, and if I was\ngoing to make a Rails blog I'd find it hard to justify writing my own when so\nmany good ones already exist.\n\nI have no intention of writing anything for Node.js because, as we all know,\n[Node.js is badass rockstar tech](http://youtu.be/bzkRVzciAZg), and so that\nrules out Javascript. Ruling out Java isn't hard (not that I have anything\nagainst Java, just don't want to write a blog in it), and Clojure and Scala are\na bit too esoteric for my taste at the moment. So, Python it is.\n\nThe choice of Python as the programming language makes the choice of web\nframework fairly simple: I will be building this blog on\n[Django](https://www.djangoproject.com/).\n\nThe other miscellaneous tools I'll be using are mostly a matter of choice.\nI'll be using [Git](http://git-scm.com/) as my version control system, partly\nbecause Heroku is managed using Git and partly because Git is awesome. Given\nthat I'm using Git for the blog, I will use Git to manage my blog posts as\nwell; and with those two things done, I'll use\n[GitHub](https://github.com/Lukasa) to store my blog posts and any part of my\nblog framework I can easily open source.\n\nSpeaking of managing my blog posts in Git, if I'm doing that my posts should\nreally be plain text files. I don't want to write these files in raw HTML, so\nwhy not use the cool markup tech of the moment,\n[Markdown](http://daringfireball.net/projects/markdown/). A quick search of the\nPython Package Index shows that there is already a\n[Markdown parser](http://pypi.python.org/pypi/Markdown/2.1.1) written for\nPython, which makes my life easier.\n\nAs for the development tools I'll be using, I'm a UNIXy type of developer. My\ndevelopment machine is a Macbook Pro running OS X Lion, and I will be spending\nmy time in Terminal.app. I use [tmux](http://tmux.sourceforge.net/) to\nimprove my productivity, and I do all of my code writing in Vim. Any\ninstructions I provide in this blog will be perfect for people using OS X who\nare comfortable in the command line, and fairly easy for people using Linux. If\nyou're using Windows: don't. Dual-boot with Linux, or virtualise with\n[VirtualBox](https://www.virtualbox.org/). If you're serious about development,\nyou'll eventually need to familiarise yourself with the command prompt: now is\nas good a time to start as any.\n\n### Ok, let's go\n\nNext up: setting up our development environment. Let's go!\n\n", 
            "publication_date": "2012-05-11T18:11:08.654Z", 
            "enable_comments": false, 
            "title": "2_Building_A_Blog_Part_2"
        }
    }, 
    {
        "pk": 3, 
        "model": "posts.post", 
        "fields": {
            "body": "## Building a Blog Part 3\n\nIt's time to start work! Let's begin. The very first thing to do, if you\nhaven't already, is to download and install `virtualenv`. Any Python\ndevelopment you do should be done inside a virtualenv, to make sure that\nanything that works locally should work remotely. To install `virtualenv`,\nrun:\n\n    pip install virtualenv\n\nIf you find you don't have `pip` installed, run:\n\n    easy_install pip\n\nYou'll thank me.\n\nNext, you need a locally installed version of PostgreSQL, because that's the\ndefault database used by Heroku. You should be able to get it from your OS's\npackage manager. On OS X, you should be using\n[Homebrew](http://mxcl.github.com/homebrew/), and if you are the relevant\ncommand is:\n\n    brew install postgresql\n\nWhen that's done, you should follow whatever steps necessary to get Postgres up\nand running. Homebrew prints about a million lines of text telling you how to\ninitialise Postgres and run it on startup, so follow those on a Mac. On a\nLinux box...honestly, I don't know. Remind me to test it on my VM sometime.\n\nThen, pick a location to do your development. The first thing to do is create\na folder that will be your virtualenv. For instance, I want to develop in a\nfolder called `~/website`. To do that, run the following:\n\n    mkdir ~/website\n    cd ~/website\n    virtualenv --no-site-packages venv\n\nThe `--no-site-packages` option is strictly the default behaviour of the newer\nversions of `virtualenv`, but you might have an old version installed. It's\nvital that we have a truly isolated environment.\n\nThe next step is to turn this place into a Git repository. To do that, we run\nthe following commands:\n\n    echo \"venv\" >> .gitignore\n    git init\n    git add .gitignore\n    git commit -m \"Initial commit\"\n\nAwesome! Now, whenever you're working on your website, you want to make sure\nyou're in your virtualenv. To activate it, run:\n\n    source venv/bin/activate\n\nThe word 'venv' should appear in your command prompt, as an indicator of your\nsuccess. Whenever you're in your virtualenv, you should find that your commands\nall run from the virtualenv. For example, when I run `which pip` with the\nvirtualenv active, my shell returns `/Users/Lukasa/website/venv/bin/pip`. This\nis a good thing: we want to use virtualenv versions of these programs. By the\nby, if you want to get out of your virtualenv, run `deactivate`.\n\nAnyway, enough digression. We need Django, so let's get it! While we're here,\nwe will need to interface with PostgreSQL, so we need to install the relevant\nPython module as well. If your virtualenv is active, you can simply run:\n\n    pip install django psycopg2\n\nYou should note that any Python executables installed by `pip` in your\nvirtualenv will *not* be on your path: instead, they'll be in `venv/bin/`.\nYou'll notice this in the next command. We need to create a Django project.\nLet's do it:\n\n    venv/bin/django-admin.py startproject blog\n\nThis command will create a `blog/` directory in your git repo that now contains\nthe shell of a Django project. We should make sure it works, so run the\nfollowing command:\n\n    cd blog\n    python manage.py runserver 127.0.0.1:8000\n\nWhile the server is running, open your browser and surf to\n`http://127.0.0.1:8000`. You should see a pretty webpage with a blue banner. If\nyou do, SUCCESS. Everything is ready. Go back to your command prompt and hit\nCtrl-C to kill the server. Then, use Git to add the `blog/` directory to the\nrepository, and commit it using a commit message that suits you.\n\n### What next?\n\nHere's the thing: we haven't actually done anything yet. All the work is yet to\ncome. Let's get excited! See me in Part 4.\n\n", 
            "publication_date": "2012-05-11T18:11:09.839Z", 
            "enable_comments": true, 
            "title": "3_Building_A_Blog_Part_3"
        }
    }, 
    {
        "pk": 1, 
        "model": "posts.comment", 
        "fields": {
            "date": "2012-05-11T18:12:21.580Z", 
            "text": "Test comment, right here.", 
            "post": 3, 
            "author": "Lukasa"
        }
    }, 
    {
        "pk": 2, 
        "model": "posts.comment", 
        "fields": {
            "date": "2012-05-11T18:12:49.176Z", 
            "text": "This is also a test comment.", 
            "post": 2, 
            "author": "Steve"
        }
    }
]
